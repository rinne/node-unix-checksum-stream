#! /usr/bin/env node
'use strict';

const path = require('path');

const Optist = require('optist');
const ou = require('optist/util');

const UnixChecksumStream = require('./index.js');
//const UnixChecksumStream = require('unix-checksum-stream/');
const ph = require('./promise.js');
//const ph = require('unix-checksum-stream/promise');

var opt = ((new Optist())
		   .opts([ { shortName: 'a',
					 longName: 'algorithm',
					 description: 'Hash algorithm to use.',
					 hasArg: true,
					 optArgCb: ou.allowListCbFactory(UnixChecksumStream.getHashes()),
					 multi: true },
				   { shortName: 'e',
					 longName: 'digest-encoding',
					 description: 'Digest encoding to use.',
					 hasArg: true,
					 optArgCb: ou.allowListCbFactory(UnixChecksumStream.getDigestEncodings()) },
				   { shortName: 'm',
					 longName: 'multi-algorithm-output',
					 description: 'Use output format of multiple algorithms even in case of one.',
					 conflictsWith: 'one-algorithm-output' },
				   { shortName: 'o',
					 longName: 'one-algorithm-output',
					 description: 'Use output format of one algorithm even in case of multiple ones (confusing).',
					 conflictsWith: 'multi-algorithm-output' },
				   { shortName: 's',
					 longName: 'string',
					 description: 'Hash a string.',
					 hasArg: true,
					 multi: true },
				   { shortName: 'f',
					 longName: 'file',
					 description: 'Hash a file.',
					 hasArg: true,
					 multi: true },
				   { shortName: 'S',
					 longName: 'hash-strings',
					 description: 'Extra command line arguments are strings.',
					 conflictsWith: 'hash-files' },
				   { shortName: 'F',
					 longName: 'hash-files',
					 description: 'Extra command line arguments are filenames.',
					 conflictsWith: 'hash-strings' },
				   { shortName: 'c',
					 longName: 'compact',
					 description: 'Generate compact output.' },
				   { shortName: 'E',
					 longName: 'list-digest-encodings' },
				   { shortName: 'A',
					 longName: 'list-algorithms' } ])
		   .help(path.basename(process.argv[1]))
		   .parse());

(function(rest) {
	var strings = opt.value('string');
	var files = opt.value('file');
	var errors = 0;
	var p = [];
	var algorithms = ((opt.value('algorithm').length > 0) ? opt.value('algorithm') : []);
	var encoding = opt.value('digest-encoding') ? opt.value('digest-encoding') : 'default';
	
	if (opt.value('list-digest-encodings') || opt.value('list-algorithms')) {
		if (opt.value('list-algorithms')) {
			if (opt.value('compact')) {
				console.log(UnixChecksumStream.algorithms().join("\n"));
			} else {
				console.log('algorithms: ' + UnixChecksumStream.algorithms().join(', '));
			}
		}
		if (opt.value('list-digest-encodings')) {
			if (opt.value('compact')) {
				console.log(UnixChecksumStream.encodings().join("\n"));
			} else {
				console.log('digest encodings: ' + UnixChecksumStream.encodings().join(', '));
			}
		}
		process.exit(0);
	}
	if (algorithms.length < 1) {
		let a = path.basename(process.argv[1]);
		if (UnixChecksumStream.algorithms().indexOf(a) < 0) {
			let m;
			if ((m = a.match(/^([a-zA-Z0-9]+-)(.*)$/)) && (UnixChecksumStream.algorithms().indexOf(m[2]) >= 0)) {
				a = m[2];
			} else {
				console.log('Error: Explicit --algorithm option is required');
				opt.showHelpAndExit(1)
			}
		}
		algorithms = [ a ];
	}
	if (rest.length > 0) {
		if (opt.value('hash-strings')) {
			strings = strings.concat(rest);
		} else {
			files = strings.concat(rest);
		}
	}
	function resultHandlerFactory(name) {
		return function(ret) {
			if (ret instanceof Error) {
				if (opt.value('compact')) {
					ret = '?';
				} else {
					ret = ret.toString().replace(/\n/g, ' ').replace(/\s+/g, ' ');
				}
				errors++;
			}
			if (Buffer.isBuffer(ret)) {
				ret = ret.toString('hex');
			}
			if (opt.value('compact')) {
				return ret;
			} else {
				return (name + ': ' + ret);
			}
		}
	};
	if ((strings.length == 0) && (files.length == 0)) {
		algorithms.forEach(function(algorithm) {
			var name = '<stdin>';
			if (((algorithms.length > 1) || opt.value('multi-algorithm-output')) && (! opt.value('one-algorithm-output'))) {
					name = algorithm + '(' + name + ')';
			}
			var handler = resultHandlerFactory(name);
			p.push(ph.stream(process.stdin, algorithm, encoding)
				   .then(handler)
				   .catch(handler));
		});
	}
	strings.forEach(function(s) {
		algorithms.forEach(function(algorithm) {
			var name = '"' + s + '"';
			if (((algorithms.length > 1) || opt.value('multi-algorithm-output')) && (! opt.value('one-algorithm-output'))) {
					name = algorithm + '(' + name + ')';
			}
			var handler = resultHandlerFactory(name);
			p.push(ph.data(s, algorithm, encoding)
				   .then(handler)
				   .catch(handler));
		});
	});
	files.forEach(function(f) {
		algorithms.forEach(function(algorithm) {
			var name = f;
			if (((algorithms.length > 1) || opt.value('multi-algorithm-output')) && (! opt.value('one-algorithm-output'))) {
					name = algorithm + '(' + name + ')';
			}
			var handler = resultHandlerFactory(name);
			p.push(ph.file(f, algorithm, encoding)
				   .then(handler)
				   .catch(handler));
		});
	});
	(Promise.all(p)
	 .then(function(ret) {
		 ret.forEach(function(s) {
			 console.log(s);
		 });
		 process.exit((errors > 0) ? 1 : 0);
	 })
	 .catch(function(e) {
		 console.error('Unexpected error');
		 process.exit(1);
	 }))
})(opt.rest())
